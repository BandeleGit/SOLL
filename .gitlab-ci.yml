# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  BASE_BINDIR: build
  TEST_SRCDIR: test/release
  TEST_ENVDIR: utils/ewasm-testbench
  LIT_PATH: /usr/lib/llvm-8/build/utils/lit/lit.py
  EVM_BINDIR: /evm_llvm_build
  EVM_LIT_PATH: ${EVM_BINDIR}/bin/llvm-lit

stages:
  - build
  - compile
  - test
  - coverage

# Templates
.before_build: &before_build
  - rm -rf ${BASE_BINDIR}
  - mkdir ${BASE_BINDIR}
  - cd ${BASE_BINDIR}

.cache_paths: &cache_paths
  paths:
    - ${BASE_BINDIR}

.build_job_template: &build_job
  stage: build
  image: secondstate/soll:${OS}-${COMPILER}
  before_script:
    - *before_build
  script:
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DSOLL_INCLUDE_TESTS=true -DLLVM_EXTERNAL_LIT=${LIT_PATH}
    - make -j2
  cache:
    <<: *cache_paths
    key: ${OS}-${COMPILER}
    policy: push

# General Build Jobs
ubuntu-gcc:
  <<: *build_job
  tags: ["gcc"]
  variables:
    OS: "ubuntu"
    COMPILER: "gcc"

ubuntu-clang:
  <<: *build_job
  tags: ["clang"]
  variables:
    OS: "ubuntu"
    COMPILER: "clang"

# Jobs for Ewasm Backend
compile:wasm:
  stage: compile
  image: secondstate/soll:ubuntu-compile
  needs: ["ubuntu-clang"]
  tags: ["clang"]
  variables:
    SOLL_PATH: "${BASE_BINDIR}/tools/soll/soll"
  script:
    - bash -c "./utils/compile sol ewasm ${TEST_ENVDIR}/test/*.sol"
  after_script:
    - cp ${TEST_ENVDIR}/test/*.wasm ${BASE_BINDIR}
  cache:
    <<: *cache_paths
    key: ubuntu-clang
    policy: pull-push

test:wasm:
  stage: test
  image: secondstate/soll:ubuntu-test
  needs: ["compile:wasm"]
  tags: ["clang"]
  before_script:
    - cp ${BASE_BINDIR}/*.wasm ${TEST_ENVDIR}/test
  script:
    - bash -c "cd ${BASE_BINDIR} && ctest"
    - bash -c "cd ${TEST_ENVDIR} && mocha"
  cache:
    <<: *cache_paths
    key: ubuntu-clang
    policy: pull

# Jobs for EVM backend
ubuntu-clang:evm:
  stage: build
  image: secondstate/soll:ubuntu-evm-llvm
  tags: ["evm"]
  before_script:
    - *before_build
  script:
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DSOLL_INCLUDE_TESTS=true -DLLVM_EXTERNAL_LIT=${EVM_LIT_PATH} -DSOLL_ENABLE_EVM=true -DLLVM_CMAKE_PATH=${EVM_BINDIR}
    - make -j2
  cache:
    <<: *cache_paths
    key: ubuntu-clang-evm
    policy: push

compile:evm:
  stage: compile
  image: secondstate/soll:ubuntu-evm-llvm
  needs: ["ubuntu-clang:evm"]
  tags: ["evm"]
  variables:
    SOLL_PATH: "${BASE_BINDIR}/tools/soll/soll"
  script:
    - bash -c "./utils/compile sol evm ${TEST_ENVDIR}/test/*.sol"
  cache:
    <<: *cache_paths
    key: ubuntu-clang-evm
    policy: pull-push

test:ubuntu-coverage:
  stage: test
  image: secondstate/soll:ubuntu-coverage
  before_script:
    - *before_build
  script:
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DSOLL_INCLUDE_TESTS=true -DSOLL_COVERAGE=true -DLLVM_EXTERNAL_LIT=${LIT_PATH} -DSOLL_ENABLE_EVM=true -DLLVM_CMAKE_PATH=${EVM_BINDIR}
    - make -j2 all coverage
    - mv -v coverage ../public
  tags: ["evm"]
  cache:
    key: ubuntu-coverage
    paths: ["public"]
    policy: push

pages:
  stage: coverage
  image: secondstate/soll:ubuntu-coverage
  script: ["true"]
  tags: ["evm"]
  cache:
    key: ubuntu-coverage
    paths: ["coverage"]
    policy: pull
  artifacts:
    paths: ["public"]
  only:
    - master
